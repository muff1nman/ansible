#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

# (c) 2012, Afterburn <http://github.com/afterburn>
# (c) 2013, Aaron Bull Schaefer <aaron@elasticdog.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: pacman
short_description: Manage packages with I(pacman)
description:
    - Manage packages with the I(pacman) package manager, which is used by
      Arch Linux and its variants.
version_added: "1.0"
author: Afterburn
notes: []
requirements: []
options:
    name:
        description:
            - Name of the package to install, upgrade, or remove.
        required: false
        default: null

    state:
        description:
            - Desired state of the package.
        required: false
        default: "present"
        choices: ["present", "absent"]

    recurse:
        description:
            - When removing a package, also remove its dependencies, provided
              that they are not required by other packages and were not
              explicitly installed by a user.
        required: false
        default: "no"
        choices: ["yes", "no"]
        version_added: "1.3"

    update_cache:
        description:
            - Whether or not to refresh the master package lists. This can be
              run as part of a package installation or as a separate step.
        required: false
        default: "no"
        choices: ["yes", "no"]
'''

EXAMPLES = '''
# Install package foo
- pacman: name=foo state=present

# Remove packages foo and bar
- pacman: name=foo,bar state=absent

# Recursively remove package baz
- pacman: name=baz state=absent recurse=yes

# Run the equivalent of "pacman -Syy" as a separate step
- pacman: update_cache=yes
'''

import json
import shlex
import os
import re
import sys
from collections import namedtuple

PACMAN_PATH = "/usr/bin/pacman"

ModuleStatus = namedtuple('ModuleStatus', 'changed msg failed')

def query_package(module, name, state="present"):
    # pacman -Q returns 0 if the package is installed,
    # 1 if it is not installed
    if state == "present":
        cmd = "pacman -Q %s" % (name)
        rc, stdout, stderr = module.run_command(cmd, check_rc=False)

        if rc == 0:
            return True

        return False


def update_package_db(module, check_only):
    if check_only:
        return ModuleStatus(changed=True, failed=False, msg='The package master lists will be updated')

    cmd = "pacman -Syy"
    rc, stdout, stderr = module.run_command(cmd, check_rc=False)

    if rc == 0:
        return ModuleStatus(changed=True, failed=False, msg='The package master lists were updated')
    else:
        return ModuleStatus(failed=True, changed=False, msg="could not update package db")


def remove_packages(module, packages):
    if module.params["recurse"]:
        args = "Rs"
    else:
        args = "R"

    remove_c = 0
    # Using a for loop incase of error, we can report the package that failed
    for package in packages:
        # Query the package first, to see if we even need to remove
        if not query_package(module, package):
            continue

        cmd = "pacman -%s %s --noconfirm" % (args, package)
        rc, stdout, stderr = module.run_command(cmd, check_rc=False)

        if rc != 0:
            return ModuleStatus(failed=True,changed=False,msg="failed to remove %s" % (package))

        remove_c += 1

    if remove_c > 0:
        return ModuleStatus(changed=True, failed=False, msg="removed %s package(s)" % remove_c)

    return ModuleStatus(changed=False, failed=False, msg="package(s) already absent")


def install_packages(module, packages, package_files):
    install_c = 0

    for i, package in enumerate(packages):
        if query_package(module, package):
            continue

        if package_files[i]:
            params = '-U %s' % package_files[i]
        else:
            params = '-S %s' % package

        cmd = "pacman %s --noconfirm" % (params)
        rc, stdout, stderr = module.run_command(cmd, check_rc=False)

        if rc != 0:
            return ModuleStatus(failed=True,changed=False,msg="failed to install %s" % (package))

        install_c += 1

    if install_c > 0:
        return ModuleStatus(changed=True, failed=False, msg="installed %s package(s)" % (install_c))

    return ModuleStatus(changed=False, failed=False, msg="package(s) already installed")


def check_packages(module, packages, state):
    would_be_changed = []
    for package in packages:
        installed = query_package(module, package)
        if ((state == "present" and not installed) or
                (state == "absent" and installed)):
            would_be_changed.append(package)
    if would_be_changed:
        if state == "absent":
            state = "removed"

        return ModuleStatus(changed=True, failed=False, msg="%s package(s) would be %s" % (
            len(would_be_changed), state))
    else:
        return ModuleStatus(changed=False, failed=False, msg="package(s) already %s" % state)

def status_join(status1,status2):
    return ModuleStatus(
        changed=(status1.changed or status2.changed),
        failed=(status1.failed or status2.failed),
        msg=', '.join(filter(None, [status1.msg,status2.msg])))

def main():
    module = AnsibleModule(
        argument_spec    = dict(
            name         = dict(aliases=['pkg']),
            state        = dict(default='present', choices=['present', 'installed', 'absent', 'removed']),
            recurse      = dict(default='no', choices=BOOLEANS, type='bool'),
            update_cache = dict(default='no', aliases=['update-cache'], choices=BOOLEANS, type='bool')),
        required_one_of = [['name', 'update_cache']],
        supports_check_mode = True)

    if not os.path.exists(PACMAN_PATH):
        module.fail_json(msg="cannot find pacman, looking for %s" % (PACMAN_PATH))

    p = module.params

    # normalize the state parameter
    if p['state'] in ['present', 'installed']:
        p['state'] = 'present'
    elif p['state'] in ['absent', 'removed']:
        p['state'] = 'absent'

    return_status = ModuleStatus(changed=False,failed=False,msg=None)

    if p["update_cache"]:
        return_status = status_join(return_status, 
                                    update_package_db(module, module.check_mode))

    if return_status.failed:
        module.exit_json(*return_status)

    if p['name']:
        pkgs = p['name'].split(',')

        pkg_files = []
        for i, pkg in enumerate(pkgs):
            if pkg.endswith('.pkg.tar.xz'):
                # The package given is a filename, extract the raw pkg name from
                # it and store the filename
                pkg_files.append(pkg)
                pkgs[i] = re.sub('-[0-9].*$', '', pkgs[i].split('/')[-1])
            else:
                pkg_files.append(None)

        pkg_ret_status = None
        if module.check_mode:
            pkg_ret_status = check_packages(module, pkgs, p['state'])
        elif p['state'] == 'present':
            pkg_ret_status = install_packages(module, pkgs, pkg_files)
        elif p['state'] == 'absent':
            pkg_ret_status = remove_packages(module, pkgs)
        else:
            pkg_ret_status = ModuleStatus(
                failed=True, 
                changed=False, 
                msg="One of 'name' or 'update_cache' must be specified")

        return_status = status_join(return_status, pkg_ret_status)

    if return_status.failed:
      module.fail_json(msg=return_status.msg)
    else:
      module.exit_json(msg=return_status.msg, changed=return_status.changed)


# import module snippets
from ansible.module_utils.basic import *
    
main()        
